---
title: Projects
header: projects
---

%article
  %ul.projects
    -# i could stick all these in a json and to this dynamically
    %li
      %h2.heading
        typed-install
        %span.date
          \- (typescript, npm, cli)
          \- March, 2018 -
          %a{href: "https://www.npmjs.com/package/typed-install", target: "_blank", rel: 'noopener'}<
            app
          \-
          %a{href: "https://github.com/xavdid/typed-install#readme", target:"_blank", rel: 'noopener'}
            info
      %p
        To ease the pain of hunting down typings while installing new npm dependencies, I made this to do the work for me. It's got a nice UX and follows all the conventions of finding where the typings might live. It also makes it very clear what got installed and what is still missing.
    %li
      %h2.heading
        Kerfuffle v3
        %span.date
          \- (typescript, react, airtable, heroku)
          \- December, 2017 -
          %a{href: "https://kerfuffle.herokuapp.com", target: "_blank", rel: 'noopener'}<
            app
          \-
          %a{href: "https://github.com/xavdid/kerfuffle#readme", target:"_blank", rel: 'noopener'}
            info
      %p
        Now that Wunderlist is on the way out, this now pulls data from Airtable. Goal is still the same: pick a random piece media from my to watch/read sources and surface info about it. The front-end has also been re-written in React. See below for the history of the app.
    %li
      %h2.heading
        Seymour
        %span.date
          \- (typescript, slack, heroku)
          \- October, 2017 -
          %a{href: "https://seymourapp.herokuapp.com/", target: "_blank", rel: 'noopener'}<
            app
          \-
          %a{href: "https://github.com/xavdid/seymour#readme", target:"_blank", rel: 'noopener'}
            info
      %p
        A feed processor for Slack which specializes in very nice unfurls. Pairs well with Zapier.
    %li
      %h2.heading
        Monopoly
        %span.date
          \- (typescript, angular, pug)
          \- February, 2017 -
          %a{href: "https://davidbrownman.com/monopoly/", target: "_blank", rel: 'noopener'}<
            app
          \-
          %a{href: "https://github.com/xavdid/monopoly#readme", target:"_blank", rel: 'noopener'}
            info
      %p
        Rather than track our Safeway monopoly tickets by hand, I made a quick site to see if we'd won any prizes.
    %li
      %h2.heading
        word-count
        %span.date
          \- (typescript, npm, cli)
          \- September, 2016 -
          %a{href: "https://www.npmjs.com/package/epub-wordcount", target: "_blank", rel: 'noopener'}<
            app
          \-
          %a{href: "https://github.com/xavdid/epub-wordcount#readme", target:"_blank", rel: 'noopener'}
            info
      %p
        As part of an ongoing project to track everything I read and watch, this is a cli app to get a rough count of the number of words in a novel.
    %li
      %h2.heading
        Publists
        %span.date
          \- (typescript, angular, pug, oauth, heroku)
          \- June, 2016 -
          %a{href: "https://github.com/xavdid/publists#readme", target:"_blank", rel: 'noopener'}
            info
      %p
        A way to publicly share my Wunderlists, in absence of a 1st party way to do so. Also, my first real foray into Typescript.

    %li
      %h2.heading
        heroku-config
        %span.date
          \- (node, npm, heroku, mocha)
          \- April, 2016 -
          %a{href: "https://www.npmjs.com/package/heroku-config", target: "_blank", rel: 'noopener'}<
            package
          \-
          %a{href: "https://github.com/xavdid/heroku-config#readme", target:"_blank", rel: 'noopener'}
            info
      %p
        A rewrite of a CLI tool used to push and pull config variables from heroku using the new v4 CLI. Includes a full suite of tests and complies with the best practices set out by the Heroku developers.

    %li
      %h2.heading
        Dead Simple
        %span.date
          \- (angularjs, node, socket.io)
          \- February, 2016 -
          %a{href: "https://deadsimple.herokuapp.com/", target: "_blank", rel: 'noopener'}<
            app
          \-
          %a{href: "https://github.com/xavdid/dead_simple#readme", target:"_blank", rel: 'noopener'}
            info
      %p
        Quick proof of concept for making an infinite-room chat system using socket.io. Also a good excuse to start exploring the "wonderful world" of JS build tools.

    %li
      %h2.heading
        Kerfuffle v2
        %span.date
          \- (angularjs, node, express, jade)
          \- December, 2015 -
          %a{href: "https://github.com/xavdid/kerfuffle/tree/9b104c706474482f5f6fdd03bbce3fecdd4f1c2d", target: "_blank", rel: 'noopener'}<
            code

      %p
        The second incarnation of my front-end learning project, it picks a random item from my to watch|read wunerlists and gives some extra info about it. Fairly extensible as far as new lists and datasources are concerned.

    %li
      %h2.heading
        Pitch Awesome
        %span.date
          \- (iOS, swift, audacity)
          \- October, 2015 -
          -# %a{href: "https://bit.ly/pitch_awesome", target: "_blank", rel: 'noopener'}<
            app
          \-
          %a{href: "https://github.com/xavdid/pitch_awesome#readme", target:"_blank", rel: 'noopener'}
            info
      %p
        My first foray into iOS, an a cappella assistant app. It stores your group's setlist along with the starting notes for each song. I also built a full pitch pipe into the app so that you can always be sure to be on key. The app is currently otu of the app store, as I don't have an Apple developer membership anymore.

    %li
      %h2.heading
        Quidditch API
        %span.date
          \- (nodejs, express, mongoose, mongo, mocha)
          \- June, 2015 -
          %a{href: "https://quidapi.herokuapp.com", target: "_blank", rel: 'noopener'}<
            site
          \-
          %a{href: "https://github.com/quidtech/quid_api", target:"_blank", rel: 'noopener'}
            info
      %p
        A performant mongoose schema for storing a historical record of quidditch matches. Data is written in via cooperation with national quidditch leagues around the world. The project's main goal was allow any interested quidditch developers to access an updated teams & games resource for their own projects.

    %li
      %h2.heading
        IRDP Website
        %span.date
          \- (ruby, sinatra, haml, scss, js, parse)
          \- August, 2014 -
          %a{href: "http://refdevelopment.com", target: "_blank", rel: 'noopener'}<
            site
          \-
          %a{href: "/refbook", target:"_blank", rel: 'noopener'}
            info
      %p
        The central testing hub for the International Referee Development Program. The site acts as a central hub for quidditch referee testing, payment, and reference. The site also provides a full set of guides and pages, all available in multiple languages (though I didn't do any translating).

    %li
      %h2.heading
        Kerfuffle
        %span.date
          \- (ruby, sinatra, angular, haml, heroku)
          \- July, 2014 -
          %a{href: "https://github.com/xavdid/kerfuffle/tree/2b4d212c13802f4d3dc3fe6d785fbcc7fb3ace7d#readme", target:"_blank", rel: 'noopener'}
            code
      %p
        A web form that would search a tv show by name and give you a random episode (with details) to watch from it. Great for shuffling through Netflix shows.

    %li
      %h2.heading
        Website Redesign
        %span.date
          \- (haml, scss, js, middleman)
          \- January, 2014 -
          %a{href: "https://github.com/xavdid/xavdid.github.io/tree/source", target: "_blank", rel: 'noopener'}<
            uncompiled source
      %p
        My old site was great, but a little bare bones. Tired with the tedium of writing straight HTML and CSS, I set up a
        %a{href:"https://middlemanapp.com", target: "_blank", rel: 'noopener'}<
          middleman
        server so I could develop in a rails-like environment (haml, scss, partials, etc) and then generate a static site out of that. I got a nice responsive template from
        %a{href: "https://html5boilerplate.com", target: "_blank", rel: 'noopener'}<
          html5boilerplate
        and gutted it to meet my needs. Additionally, Google's
        %a{href: "https://github.com/google/code-prettify", target:"_blank", rel: 'noopener'}<
          code-prettify
        syntax highlights any code that shows up on the site. How cool is that?

    %li
      %h2.heading
        StackPro
        %span.date
          \- (ruby, rails, haml, scss, js, mongo)
          \- December, 2013 -
          %a{href: "https://stackpro.herokuapp.com", target: "_blank", rel: 'noopener'}<
            app
          \-
          %a{href: "/stackpro", target:"_blank", rel: 'noopener'}
            info
      %p
        A neat little project that was used as part of my application to the
        %a{href: "http://www.thehackerati.com", target: "_blank", rel: 'noopener'}<
          hackerati
        that tracks how many questions are asked and answered on stackoverflow each hour. One of my earliest solo projects that had any useful functionality.

    %li
      %h2.heading
        Kinect481 UI
        %span.date
          \- (ruby, sinatra, haml, scss, js, mongodb)
          \- October, 2013 -
          -# %a{href: "http://kinect481.herokuapp.com", target: "_blank", rel: 'noopener'}<
          -#   app
          -# \-
          -# %a{href: "http://kinect481.herokuapp.com/admin", target:"_blank", rel: 'noopener'}
          -#   info
      %p
        This was designed as a UI for children with cerebral palsy who lack the fine motor control needed for a keyboard and mouse. A MS kinect would register input in a cardinal direction and my UI would do the database manipulation to store that value and communicate it back to the tower. Project with
        %a{href: "http://www-personal.umich.edu/~cgordini/", target:"_blank", rel: 'noopener'}<
          Cory
        and his group. Currently offline.

    %li
      %h2.heading
        LoLAPI
        %span.date
          \- (python, tornado, json, API, regex)
          \- March, 2013 -
          %a{href: "https://lolapi.herokuapp.com", target: "_blank", rel: 'noopener'}<
            app
          \-
          %a{href: "/lolapi"}
            info
      %p
        Originally designed as the end-all resource for League of Legends data, this was a huge project. Pulling data from multiple sources to create json representation of characters and their stats.

    -# This'll get uncommented when I fix this
    -# %li
      -# %h2.heading
      -#   Tumblr Advanced Search
      -#   %span.date
      -#     \- (python, Google App Engine, API)
      -#     \- April, 2011 -
      -#     %a{href: "http://tumblradv182.appspot.com", target: "_blank", rel: 'noopener'}<
      -#       app
      -#     \ -
      -#     %a{href: "https://github.com/xavdid/tumblradv", target:"_blank", rel: 'noopener'}
      -#       info
      -# %p
      -#   Despite being able to search the full breadth of tumblr's offerings, there is no convenient way to search the postings of a single user, so I made one. It can search and filter through any tumblr url. Though we were required to use css, it was before I had any interest at all in design. Embarrassingly, this app is down right now because of changes in Google App Engine structure and python requirements. I'll go back and update it when I have the time.

%aside
  .top
    .heading
      I Work On All Sorts of Stuff!
  .bottom
    %p
      This is a generally out of date list of some of my larger-scale and more notable projects. You might find them interesting. Additionally, you can check out my resume on
      %a{href: "https://registry.jsonresume.org/david", target: "_blank", rel: 'noopener'}<
        this
      page.

